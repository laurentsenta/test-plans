name: Run composition file with a custom git reference

on:
  workflow_call:
    inputs:
      composition_file:
        description: the workflow we're going to run
        required: true
        type: string
      custom_git_reference:
        description: the git commit or branch we're going to use for the custom target
        required: false
        type: string
      custom_git_target:
        description: the custom git fork url we're going to use for the custom target (github.com/some-fork/rust-libp2p)
        required: false
        type: string
      custom_interop_target:
        description: in the case of cross-implementation testing, the implementation target (go | rust | ...)
        required: false
        type: string
      testground_endpoint:
        required: false
        type: string
      test_repository:
        required: false
        type: string
      test_ref:
        required: false
        type: string
jobs:
  run_test:
    name: Run a test with different versions
    runs-on: ubuntu-latest
    env:
      TEST_PLAN_REPO: ${{ inputs.test_repository || 'libp2p/test-plans' }}
      TEST_PLAN_BRANCH: ${{ inputs.test_ref || 'master' }}
      TESTGROUND_ENDPOINT: ${{ inputs.testground_endpoint }}
      COMPOSITION_FILE: ${{ inputs.composition_file }}
      CUSTOM_GIT_TARGET: ${{ inputs.custom_git_target }}
      CUSTOM_GIT_REFERENCE: ${{ inputs.custom_git_reference }}
      CUSTOM_INTEROP_TARGET: ${{ inputs.custom_interop_target }}
      GITHUB_RUN_ID: ${{ github.run_id }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Setup tmate session
        uses: pl-strflt/action-tmate@circleci
        if: runner.debug == '1'
        with:
          check-num-clients: true
          limit-access-to-actor: true
          wait: false
          wait-in-post: true
          wait-interval: '60000'

      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          path: test-plans
          repository: ${{ env.TEST_PLAN_REPO }}
          ref: ${{ env.TEST_PLAN_BRANCH }}

      - name: setup testground
        uses: ./test-plans/.github/actions/setup-testground

      - name: Import the plan
        working-directory: ./test-plans
        run: |
          testground plan import --from ./ --name libp2p

      - name: Cache Docker Images
        id: cache-images
        uses: actions/cache@v3
        with:
          path: ~/images/
          key: images-${{ env.COMPOSITION_FILE }}-${{ env.CUSTOM_GIT_REFERENCE }}
          restore-keys:
            images-${{ env.COMPOSITION_FILE }}


      - name: Restore Testground Images
        run: |
          mkdir -p ~/images/
          if [[ -f ~/images/save.tar.gz ]]; then
            docker load < ~/images/save.tar.gz
          fi

      - name: Resolve the git references
        if: ${{ env.CUSTOM_GIT_REFERENCE && env.CUSTOM_GIT_TARGET }}
        id: resolve_reference
        working-directory: ./test-plans
        run: |
          git fetch https://${CUSTOM_GIT_TARGET} ${CUSTOM_GIT_REFERENCE}
          SHA=`git log FETCH_HEAD -n 1 --pretty=format:"%H"`
          echo "::set-output name=custom_git_sha::${SHA}"

      - name: Resolve the libraries git references
        id: resolve_static_references
        working-directory: ./test-plans
        run: |
          git fetch https://github.com/libp2p/go-libp2p master
          SHA=`git log FETCH_HEAD -n 1 --pretty=format:"%H"`
          echo "::set-output name=go_libp2p_master::${SHA}"

          git fetch https://github.com/libp2p/rust-libp2p master
          SHA=`git log FETCH_HEAD -n 1 --pretty=format:"%H"`
          echo "::set-output name=rust_libp2p_master::${SHA}"

      - name: Build the composition file
        working-directory: ./test-plans
        timeout-minutes: 30
        run: |
          for i in 1 2 3; do
            echo "=== Attempt $i ==="
            testground build composition                        \
              --file "${COMPOSITION_FILE}"                      \
              --wait && exit 0;
            sleep 10
          done
          exit 1
        env:
          GitReference: ${{ steps.resolve_reference.outputs.custom_git_sha || inputs.custom_git_reference }}
          GitTarget: ${{ inputs.custom_git_target }}
          InteropTarget: ${{ inputs.custom_interop_target }}
          RunId: ${{ github.run_id }}
          GoLibp2pMasterSha: ${{ steps.resolve_static_references.outputs.go_libp2p_master }}
          RustLibp2pMasterSha: ${{ steps.resolve_static_references.outputs.rust_libp2p_master }}

      - name: Run the composition file
        working-directory: ./test-plans
        timeout-minutes: 6
        run: |
          testground run composition                          \
            --file "${COMPOSITION_FILE}"                      \
            --metadata-repo "${GITHUB_REPOSITORY}"            \
            --metadata-branch "${GITHUB_REF#refs/heads/}"     \
            --metadata-commit "${GITHUB_SHA}"                 \
            --collect-file ./result.tgz                       \
            --collect --wait
        env:
          GitReference: ${{ steps.resolve_reference.outputs.custom_git_sha || inputs.custom_git_reference }}
          GitTarget: ${{ inputs.custom_git_target }}
          InteropTarget: ${{ inputs.custom_interop_target }}
          RunId: ${{ github.run_id }}
          GoLibp2pMasterSha: ${{ steps.resolve_static_references.outputs.go_libp2p_master }}
          RustLibp2pMasterSha: ${{ steps.resolve_static_references.outputs.rust_libp2p_master }}

      - name: Save images
        working-directory: ./test-plans
        run: |
          echo "backing up testground.run_id=${GITHUB_RUN_ID}"
          ./list-images.sh "testground.run_id=${GITHUB_RUN_ID}" > /tmp/saved-images
          docker save $( cat /tmp/saved-images | tr '\n' ' ' ) | gzip -c > ~/images/save.tar.gz
          echo "We backup'd $(du -hs ~/images/save.tar.gz) worth of docker images"

      - uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: testground-output
          path: |
            ~/testground/
            ~/test-plans/result.tgz
            testground.*
            test-plans/*.out
