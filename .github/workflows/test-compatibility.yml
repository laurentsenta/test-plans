name: Test libp2p Compatibility

on:
  workflow_call:
    inputs:
      testsuite:
        required: true
        type: string
      testplan_a:
        required: true
        type: string
      version_a:
        required: true
        type: string
      testplan_b:
        required: true
        type: string
      version_b:
        required: true
        type: string
      testcase:
        required: true
        type: string
      testground_endpoint:
        required: false
        type: string
jobs:
  run_test:
    name: Run a test with different versions
    runs-on: ubuntu-latest
    env:
      TEST_PLAN_REPO: "laurentsenta/test-plans"
      TEST_PLAN_BRANCH: "feat/ping-interop-explo"
      INPUT_TESTSUITE: ${{ inputs.testsuite }}
      INPUT_TESTPLAN_A: ${{ inputs.testplan_a }}
      INPUT_VERSION_A: ${{ inputs.version_a }}
      INPUT_TESTPLAN_B: ${{ inputs.testplan_b }}
      INPUT_VERSION_B: ${{ inputs.version_b }}
      INPUT_TESTCASE: ${{ inputs.testcase }}
      TESTGROUND_ENDPOINT: ${{ inputs.testground_endpoint }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          path: test-plans
          repository: ${{ env.TEST_PLAN_REPO }}
          ref: ${{ env.TEST_PLAN_BRANCH }}
      - name: setup testground
        uses: ./test-plans/.github/actions/setup-testground
      - name: build the test plan
        run: cd ./test-plans/${INPUT_TESTSUITE} && ./build.sh
      - name: prepare env variable
        run: |
          PROTO=echo "${TESTGROUND_ENDPOINT}" | sed -e 's;^\(https\?\)://.*;\1;g';
          ADDR=echo "${TESTGROUND_ENDPOINT}" | sed -e 's;^https\?://;;g';

          echo "TESTGROUND_ENDPOINT_PROTO=${PROTO}" >> $GITHUB_ENV
          echo "TESTGROUND_ENDPOIT_ADDR=${ADDR}" >> $GITHUB_ENV
        shell: bash
      - name: run the test plan
        id: run
        uses: testground/testground-github-action@v1.0
        with:
          backend_addr: ${{ env.testground_endpoint_addr }}
          backend_proto: ${{ env.testground_endpoint_proto }}
          plan_directory: ./test-plans/${{ inputs.testsuite }}
          composition_file: _compositions/2-versions.toml
      - name: collect result
        if: ${{ failure() && steps.run.outputs.output_id == "" }}
        run: |
          testground collect ${{ steps.run.outputs.output_id }} --extended
      - uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: testground-output
          path: |
            ~/testground/
            testground.*
            test-plans/*/*.out
            test-plans/*/*.tgz
